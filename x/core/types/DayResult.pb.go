// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: trackerchain/core/DayResult.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UserResults struct {
	Creator   string      `protobuf:"bytes,1,opt,name=Creator,proto3" json:"Creator,omitempty"`
	UserA     *UserResult `protobuf:"bytes,2,opt,name=user_a,json=userA,proto3" json:"user_a,omitempty"`
	UserB     *UserResult `protobuf:"bytes,3,opt,name=user_b,json=userB,proto3" json:"user_b,omitempty"`
	Winner    string      `protobuf:"bytes,4,opt,name=winner,proto3" json:"winner,omitempty"`
	Timestamp string      `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *UserResults) Reset()         { *m = UserResults{} }
func (m *UserResults) String() string { return proto.CompactTextString(m) }
func (*UserResults) ProtoMessage()    {}
func (*UserResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_92f9f68ea127b2cb, []int{0}
}
func (m *UserResults) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserResults.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserResults.Merge(m, src)
}
func (m *UserResults) XXX_Size() int {
	return m.Size()
}
func (m *UserResults) XXX_DiscardUnknown() {
	xxx_messageInfo_UserResults.DiscardUnknown(m)
}

var xxx_messageInfo_UserResults proto.InternalMessageInfo

func (m *UserResults) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *UserResults) GetUserA() *UserResult {
	if m != nil {
		return m.UserA
	}
	return nil
}

func (m *UserResults) GetUserB() *UserResult {
	if m != nil {
		return m.UserB
	}
	return nil
}

func (m *UserResults) GetWinner() string {
	if m != nil {
		return m.Winner
	}
	return ""
}

func (m *UserResults) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

type UserResult struct {
	CompletedTasks  []*Task `protobuf:"bytes,1,rep,name=completed_tasks,json=completedTasks,proto3" json:"completed_tasks,omitempty"`
	IncompleteTasks []*Task `protobuf:"bytes,2,rep,name=incomplete_tasks,json=incompleteTasks,proto3" json:"incomplete_tasks,omitempty"`
}

func (m *UserResult) Reset()         { *m = UserResult{} }
func (m *UserResult) String() string { return proto.CompactTextString(m) }
func (*UserResult) ProtoMessage()    {}
func (*UserResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_92f9f68ea127b2cb, []int{1}
}
func (m *UserResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserResult.Merge(m, src)
}
func (m *UserResult) XXX_Size() int {
	return m.Size()
}
func (m *UserResult) XXX_DiscardUnknown() {
	xxx_messageInfo_UserResult.DiscardUnknown(m)
}

var xxx_messageInfo_UserResult proto.InternalMessageInfo

func (m *UserResult) GetCompletedTasks() []*Task {
	if m != nil {
		return m.CompletedTasks
	}
	return nil
}

func (m *UserResult) GetIncompleteTasks() []*Task {
	if m != nil {
		return m.IncompleteTasks
	}
	return nil
}

type Task struct {
	TaskName        string `protobuf:"bytes,1,opt,name=Task_name,json=TaskName,proto3" json:"Task_name,omitempty"`
	TaskDescription string `protobuf:"bytes,2,opt,name=Task_description,json=TaskDescription,proto3" json:"Task_description,omitempty"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_92f9f68ea127b2cb, []int{2}
}
func (m *Task) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return m.Size()
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *Task) GetTaskDescription() string {
	if m != nil {
		return m.TaskDescription
	}
	return ""
}

func init() {
	proto.RegisterType((*UserResults)(nil), "UserResults")
	proto.RegisterType((*UserResult)(nil), "UserResult")
	proto.RegisterType((*Task)(nil), "task")
}

func init() { proto.RegisterFile("trackerchain/core/DayResult.proto", fileDescriptor_92f9f68ea127b2cb) }

var fileDescriptor_92f9f68ea127b2cb = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcd, 0x4e, 0x2a, 0x31,
	0x14, 0xc7, 0x29, 0x5f, 0xf7, 0x4e, 0x27, 0xb9, 0x90, 0x2e, 0x6e, 0x9a, 0x68, 0x26, 0x38, 0x2b,
	0x5c, 0x38, 0x63, 0xd0, 0x17, 0x10, 0x48, 0xdc, 0xb1, 0x18, 0x71, 0xe3, 0x66, 0x52, 0x86, 0x13,
	0x69, 0x60, 0xda, 0x49, 0x5b, 0x82, 0xf8, 0x14, 0xbe, 0x84, 0xef, 0xe2, 0x92, 0xa5, 0x4b, 0x03,
	0x2f, 0x62, 0x5a, 0x3e, 0xc6, 0x8d, 0xcb, 0xf3, 0xfb, 0x9d, 0x7f, 0x9b, 0x9c, 0x3f, 0xbe, 0x30,
	0x8a, 0x65, 0x73, 0x50, 0xd9, 0x8c, 0x71, 0x11, 0x67, 0x52, 0x41, 0x3c, 0x64, 0xeb, 0x04, 0xf4,
	0x72, 0x61, 0xa2, 0x42, 0x49, 0x23, 0xc3, 0x77, 0x84, 0xfd, 0x47, 0x0d, 0x6a, 0x0f, 0x35, 0xa1,
	0xf8, 0xcf, 0x40, 0x01, 0x33, 0x52, 0x51, 0xd4, 0x41, 0x5d, 0x2f, 0x39, 0x8e, 0x24, 0xc4, 0xcd,
	0xa5, 0x06, 0x95, 0x32, 0x5a, 0xed, 0xa0, 0xae, 0xdf, 0xf3, 0xa3, 0x32, 0x97, 0x34, 0xac, 0xba,
	0x3b, 0xed, 0x4c, 0x68, 0xed, 0x97, 0x9d, 0x3e, 0xf9, 0x8f, 0x9b, 0x2b, 0x2e, 0x04, 0x28, 0x5a,
	0x77, 0x1f, 0x1c, 0x26, 0x72, 0x8e, 0x3d, 0xc3, 0x73, 0xd0, 0x86, 0xe5, 0x05, 0x6d, 0x38, 0x55,
	0x82, 0x50, 0x60, 0x5c, 0x3e, 0x45, 0x22, 0xdc, 0xca, 0x64, 0x5e, 0x2c, 0xc0, 0xc0, 0x34, 0x35,
	0x4c, 0xcf, 0x35, 0x45, 0x9d, 0x5a, 0xd7, 0xef, 0x35, 0x22, 0x3b, 0x25, 0xff, 0x4e, 0x76, 0x6c,
	0x25, 0xb9, 0xc6, 0x6d, 0x2e, 0x8e, 0xec, 0x10, 0xa8, 0xfe, 0x0c, 0xb4, 0x4a, 0xed, 0x12, 0xe1,
	0x08, 0xd7, 0xad, 0x20, 0x67, 0xd8, 0xb3, 0x20, 0x15, 0x2c, 0x87, 0xc3, 0x45, 0xfe, 0x5a, 0x30,
	0x62, 0x39, 0x90, 0x4b, 0xdc, 0x76, 0x72, 0x0a, 0x3a, 0x53, 0xbc, 0x30, 0x5c, 0x0a, 0x77, 0x1c,
	0x2f, 0x69, 0x59, 0x3e, 0x2c, 0x71, 0xff, 0xfe, 0x63, 0x1b, 0xa0, 0xcd, 0x36, 0x40, 0x5f, 0xdb,
	0x00, 0xbd, 0xed, 0x82, 0xca, 0x66, 0x17, 0x54, 0x3e, 0x77, 0x41, 0xe5, 0xe9, 0xea, 0x99, 0x9b,
	0xd9, 0x72, 0x12, 0x65, 0x32, 0x8f, 0x1f, 0xe6, 0x2b, 0xfe, 0xca, 0xd3, 0xdb, 0x78, 0xbc, 0x2f,
	0x6e, 0xe0, 0x8a, 0x7b, 0xd9, 0x57, 0x67, 0xd6, 0x05, 0xe8, 0x49, 0xd3, 0xf5, 0x76, 0xf3, 0x1d,
	0x00, 0x00, 0xff, 0xff, 0xe4, 0x43, 0x69, 0x06, 0xdc, 0x01, 0x00, 0x00,
}

func (m *UserResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserResults) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserResults) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintDayResult(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Winner) > 0 {
		i -= len(m.Winner)
		copy(dAtA[i:], m.Winner)
		i = encodeVarintDayResult(dAtA, i, uint64(len(m.Winner)))
		i--
		dAtA[i] = 0x22
	}
	if m.UserB != nil {
		{
			size, err := m.UserB.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDayResult(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UserA != nil {
		{
			size, err := m.UserA.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDayResult(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintDayResult(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IncompleteTasks) > 0 {
		for iNdEx := len(m.IncompleteTasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncompleteTasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDayResult(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CompletedTasks) > 0 {
		for iNdEx := len(m.CompletedTasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CompletedTasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDayResult(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TaskDescription) > 0 {
		i -= len(m.TaskDescription)
		copy(dAtA[i:], m.TaskDescription)
		i = encodeVarintDayResult(dAtA, i, uint64(len(m.TaskDescription)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskName) > 0 {
		i -= len(m.TaskName)
		copy(dAtA[i:], m.TaskName)
		i = encodeVarintDayResult(dAtA, i, uint64(len(m.TaskName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDayResult(dAtA []byte, offset int, v uint64) int {
	offset -= sovDayResult(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserResults) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovDayResult(uint64(l))
	}
	if m.UserA != nil {
		l = m.UserA.Size()
		n += 1 + l + sovDayResult(uint64(l))
	}
	if m.UserB != nil {
		l = m.UserB.Size()
		n += 1 + l + sovDayResult(uint64(l))
	}
	l = len(m.Winner)
	if l > 0 {
		n += 1 + l + sovDayResult(uint64(l))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovDayResult(uint64(l))
	}
	return n
}

func (m *UserResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CompletedTasks) > 0 {
		for _, e := range m.CompletedTasks {
			l = e.Size()
			n += 1 + l + sovDayResult(uint64(l))
		}
	}
	if len(m.IncompleteTasks) > 0 {
		for _, e := range m.IncompleteTasks {
			l = e.Size()
			n += 1 + l + sovDayResult(uint64(l))
		}
	}
	return n
}

func (m *Task) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskName)
	if l > 0 {
		n += 1 + l + sovDayResult(uint64(l))
	}
	l = len(m.TaskDescription)
	if l > 0 {
		n += 1 + l + sovDayResult(uint64(l))
	}
	return n
}

func sovDayResult(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDayResult(x uint64) (n int) {
	return sovDayResult(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDayResult
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDayResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDayResult
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDayResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserA", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDayResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDayResult
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDayResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserA == nil {
				m.UserA = &UserResult{}
			}
			if err := m.UserA.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDayResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDayResult
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDayResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserB == nil {
				m.UserB = &UserResult{}
			}
			if err := m.UserB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Winner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDayResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDayResult
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDayResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Winner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDayResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDayResult
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDayResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDayResult(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDayResult
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDayResult
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedTasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDayResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDayResult
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDayResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletedTasks = append(m.CompletedTasks, &Task{})
			if err := m.CompletedTasks[len(m.CompletedTasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncompleteTasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDayResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDayResult
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDayResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncompleteTasks = append(m.IncompleteTasks, &Task{})
			if err := m.IncompleteTasks[len(m.IncompleteTasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDayResult(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDayResult
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDayResult
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDayResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDayResult
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDayResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDayResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDayResult
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDayResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDayResult(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDayResult
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDayResult(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDayResult
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDayResult
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDayResult
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDayResult
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDayResult
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDayResult
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDayResult        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDayResult          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDayResult = fmt.Errorf("proto: unexpected end of group")
)
