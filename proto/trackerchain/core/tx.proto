syntax = "proto3";
package trackerchain.core;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "trackerchain/core/params.proto";
import "trackerchain/core/DayResult.proto";

option go_package = "github.com/Skwizi_4/TrackerChain/x/core/types";




// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  rpc CreateBlock(MsgCreateBlock) returns (MsgCreateBlockResponse);
  rpc ValidateBlock(MsgValidateBlock) returns (MsgValidateBlockResponse);

}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "trackerchain/x/core/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgCreateBlock {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  UserResults body = 2;
}

message MsgCreateBlockResponse {
  uint64 id = 1;
}

message MsgGetBlock {
  string creator = 1;
  uint64 id = 2;
}

message MsgGetBlockResponse {
  string creator = 1;
  UserResults body = 2;
  string title = 3;
}

message MsgValidateBlock {
  string creator = 1;
  uint64 id = 2;
}

message MsgValidateBlockResponse {
  bool is_valid = 1;
}